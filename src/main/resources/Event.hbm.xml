<?xml version="1.0"?>

<!--
  This is a Hibernate mapping (hbm.xml) file.
  Hibernate uses the mapping metadata to determine how to load and store objects of the persistent class.
-->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.hibernate.tutorial.hbm">

    <!--
     The name attribute (combined here with the package attribute from the containing <hibernate-mapping/> element)
     names the FQN (Full Qualified Name) of the class to be defined as an entity.
     The table attribute names the database table which contains the data for this entity.
     Instances of the Event class are now mapped to rows in the EVENTS database table.
    -->
    <class name="Event" table="EVENTS">
        <!--
          Hibernate uses the property named by the <id/> element to uniquely identify rows in the table.
          It is not required for the id element to map to the tableâ€™s actual primary key column(s), but it is the
          normal convention. Tables mapped in Hibernate do not even need to define primary keys. However, it is strongly
          recommend that all schemas define proper referential integrity.
        -->
        <id name="id" column="EVENT_ID">
            <!--
              The generator element informs Hibernate about which strategy is used to generated primary key values for
              this entity. This example uses a simple incrementing count.
            -->
            <generator class="increment"/>
        </id>
        <!--
          The two <property/> elements declare the remaining two persistent properties of the Event class: date and title.
          The date property mapping includes the column attribute, but the title does not. In the absence of a column
          attribute, Hibernate uses the property name as the column name. This is appropriate for title, but since date
          is a reserved keyword in most databases, you need to specify a non-reserved word for the column name.

          The title mapping also lacks a type attribute. The types declared and used in the mapping files are neither
          Java data types nor SQL database types. Instead, they are Hibernate mapping types, which are converters which
          translate between Java and SQL data types. Hibernate attempts to determine the correct conversion and mapping
          type autonomously if the type attribute is not specified in the mapping, by using Java reflection to determine
          the Java type of the declared property and using a default mapping type for that Java type.

          In some cases this automatic detection might not chose the default you expect or need, as seen with the date
          property. Hibernate cannot know if the property, which is of type java.util.Date, should map to a SQL DATE,
          TIME, or TIMESTAMP datatype. Full date and time information is preserved by mapping the property to the
          timestamp converter, which identifies the converter class org.hibernate.type.TimestampType.

          Hibernate determines the mapping type using reflection when the mapping files are processed. This process
          adds overhead in terms of time and resources. If startup performance is important, consider explicitly
          defining the type to use.
        -->
        <property name="date" type="timestamp" column="EVENT_DATE"/>
        <property name="title"/>
    </class>

</hibernate-mapping>
